# syntax=docker.io/docker/dockerfile:1

FROM node:18-alpine AS base
RUN apk add --no-cache libc6-compat curl
WORKDIR /app

# Install dependencies only when needed
FROM base AS deps
# Copy workspace configuration
COPY package.json yarn.lock ./

# Install dependencies with yarn
RUN yarn install --frozen-lockfile

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies and workspace config
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./package.json
COPY --from=deps /app/yarn.lock ./yarn.lock

# Copy source code
COPY apps/web/ ./apps/web/

# Install dependencies again to ensure binaries are available
RUN yarn install --frozen-lockfile

# Build the application
RUN yarn build

# Ensure public directory exists (create empty one if it doesn't)
RUN mkdir -p /app/apps/web/public

# Staging image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=staging
ENV NEXT_TELEMETRY_DISABLED=1

# Create nextjs user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the standalone output
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/public ./apps/web/public

USER nextjs

EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# More verbose health check for staging
HEALTHCHECK --interval=15s --timeout=5s --start-period=10s --retries=5 \
CMD curl -f http://localhost:3000/ || exit 1

CMD ["node", "apps/web/server.js"]